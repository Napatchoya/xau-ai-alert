import requests
import pandas as pd
import ta
import joblib
import os
from datetime import datetime
from dotenv import load_dotenv
from zoneinfo import ZoneInfo  # ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô Python 3.9+
from flask import Flask, jsonify, Response
from threading import Thread

load_dotenv()

# üîê TOKEN ‡πÅ‡∏•‡∏∞ CHAT_ID ‡∏Ç‡∏≠‡∏á Telegram Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
API_KEY = os.getenv("API_KEY")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI
model = joblib.load("xau_model.pkl")

app = Flask(__name__)
last_signal = None
last_sent_hour = None  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram
def send_telegram(message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": message
    }
    response = requests.post(url, data=data)
    return response.status_code

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• XAU/USD ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
def get_latest_xau():
    url = f"https://api.twelvedata.com/time_series?symbol=XAU/USD&interval=1h&outputsize=50&apikey={API_KEY}"
    res = requests.get(url).json()
    df = pd.DataFrame(res['values'])
    df['datetime'] = pd.to_datetime(df['datetime'])
    now_utc = pd.Timestamp.utcnow().replace(tzinfo=None)
    df = df[df['datetime'] <= now_utc]
    df = df.sort_values('datetime')
    df.set_index('datetime', inplace=True)
    df['close'] = df['close'].astype(float)
    df['rsi'] = ta.momentum.RSIIndicator(df['close']).rsi()
    df['ema'] = ta.trend.EMAIndicator(df['close'], window=10).ema_indicator()
    df['price_change'] = df['close'].pct_change()
    df.dropna(subset=['rsi', 'ema', 'price_change'], inplace=True)
    return df.tail(1)

# ‡∏£‡∏±‡∏ô AI ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
def run_ai_once():
    global last_signal
    try:
        latest = get_latest_xau()
        X_live = latest[['rsi', 'ema', 'price_change']]
        price = latest['close'].iloc[0]
        utc_time = latest.index[0]
        thai_time = utc_time.tz_localize('UTC').astimezone(ZoneInfo("Asia/Bangkok"))
        timestamp = thai_time.strftime('%Y-%m-%d %H:%M')

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        if X_live.isnull().values.any():
            msg = (
                f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {timestamp} \n"
                f"XAUUSD TF H1 ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà {price:,.2f}$\n"
                f"BOT ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ"
            )
            send_telegram(msg)
            return msg

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        prediction = model.predict(X_live)[0]

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì TP/SL ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
        if prediction == 1:  # BUY
            signal = "üìà BUY"
            tp1 = price * 1.002
            tp2 = price * 1.004
            tp3 = price * 1.006
            sl = price * 0.998
            reason = "RSI ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 30 ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ EMA 10 ‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô"
        else:  # SELL
            signal = "üìâ SELL"
            tp1 = price * 0.998
            tp2 = price * 0.996
            tp3 = price * 0.994
            sl = price * 1.002
            reason = "RSI ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 70 ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ EMA 10 ‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≤‡∏•‡∏á"

        msg = (
            f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {timestamp} \n"
            f"XAUUSD TF H1 ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà {price:,.2f}$\n"
            f"BOT ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ\n"
            f"‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏û‡∏£‡∏≤‡∏∞ {reason}\n"
            f"‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ {signal} ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ {price:,.2f}$\n"
            f"üéØ TP1: {tp1:,.2f}$\n"
            f"üéØ TP2: {tp2:,.2f}$\n"
            f"üéØ TP3: {tp3:,.2f}$\n"
            f"üõë SL: {sl:,.2f}$"
        )
        send_telegram(msg)
        last_signal = signal
        return msg

    except Exception as e:
        return f"‚ùå ERROR: {e}"

# Health check
@app.route('/health', methods=['GET', 'HEAD'])
def health_check():
    return Response("OK", status=200, headers={
        "Content-Type": "text/plain",
        "Cache-Control": "no-cache"
    })

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram
@app.route('/test-telegram')
def test_telegram():
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    message = f"‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å AI Bot @ {now}"
    status = send_telegram(message)
    return jsonify({"status": status, "message": message})

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡∏ó‡∏∏‡∏Å‡∏ï‡πâ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
@app.route('/run-ai')
def run_ai():
    global last_sent_hour
    now = datetime.now(ZoneInfo("Asia/Bangkok"))
    current_hour = now.hour

    if current_hour != last_sent_hour:
        last_sent_hour = current_hour
        def task():
            result = run_ai_once()
            print(result)
        Thread(target=task).start()
        return jsonify({"status": "‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏ï‡πâ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", "time": now.strftime("%Y-%m-%d %H:%M")})
    else:
        return jsonify({"status": "‚è≥ ‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡∏ï‡πâ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", "time": now.strftime("%Y-%m-%d %H:%M")})

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
